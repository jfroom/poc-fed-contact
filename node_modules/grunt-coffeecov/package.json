{
  "name": "grunt-coffeecov",
  "version": "0.1.1",
  "description": "Grunt task to compile CoffeeScript to Javascript Coverage",
  "main": "Gruntfile.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mazerte/grunt-coffeecov"
  },
  "keywords": [
    "grunt",
    "gruntplugin",
    "coffeescript",
    "coverage"
  ],
  "author": {
    "name": "Mathieu Desv√©"
  },
  "license": "BSD",
  "engines": {
    "node": "*"
  },
  "dependencies": {
    "coffee-coverage": "~0.4.0"
  },
  "peerDependencies": {
    "grunt": "~0.4"
  },
  "devDependencies": {
    "grunt": "~0.4.2",
    "chai-fs": "0.0.3",
    "chai": "~1.8.1",
    "grunt-mocha-test": "~0.8.1",
    "grunt-contrib-clean": "~0.5.0"
  },
  "readme": "Grunt CoffeeCov\n===============\n\n[![Dependency Status](https://gemnasium.com/mazerte/grunt-coffeecov.png)](https://gemnasium.com/mazerte/grunt-coffeecov)\n[![Build Status](https://travis-ci.org/mazerte/grunt-coffeecov.png?branch=master)](https://travis-ci.org/mazerte/grunt-coffeecov)\n[![Code Climate](https://codeclimate.com/github/mazerte/grunt-coffeecov.png)](https://codeclimate.com/github/mazerte/grunt-coffeecov)\n[![Built with Grunt](https://cdn.gruntjs.com/builtwith.png)](http://gruntjs.com/)\n\n[![NPM](https://nodei.co/npm/grunt-coffeecov.png?downloads=true&stars=true)](https://nodei.co/npm/grunt-coffeecov/) \n\nGrunt CoffeeCov is a Grunt task wrapper for [CoffeeCoverage](https://github.com/benbria/coffee-coverage). [CoffeeCoverage](https://github.com/benbria/coffee-coverage) compile .coffee files to .js files and adds [JSCoverage](http://siliconforks.com/jscoverage/) style instrumentation for the original [CoffeeScript](http://coffeescript.org/).\n\nFor more information, I recommend to consult the readme of [Benbria CoffeeScript](https://github.com/benbria/coffee-coverage);\n\nInstallation\n------------\n\n```shell\nnpm install grunt-coffeecov --save-dev\n```\n\n```coffeescript\n# Gruntfile.coffee\ngrunt.loadNpmTasks('grunt-coffeecov')\n```\n\nUsage\n-----\n\nCreate a `coffeecov` section in your Gruntfile\n\n```coffeescript\n# Gruntfile.coffee\ngrunt.initConfig\n  coffeecov:\n    cov:\n      src: 'src/coffee'\n      desc: 'lib-cov'\n```\n\nExample with some options\n\n```coffeescript\n# Gruntfile.coffee\ngrunt.initConfig\n  coffeecov:\n    options:\n      path: 'relative'\n    cov:\n      options:\n        initfile: 'lib-cov/coverage.js'\n      src: 'src/coffee'\n      desc: 'lib-cov'\n```\n\nYou can find a real example in [Footguard](https://github.com/mazerte/generator-footguard), it's a [Yeoman](http://yeoman.io) generator for create a single page application with CoffeeScript, Sass, Backbone and Require. [Test-footguard](https://github.com/mazerte/test-footguard) is out of box project generated with [Footguard](https://github.com/mazerte/generator-footguard), you can read the `Gruntfile` and try the project. \n\nIf you use [Mocha](http://visionmedia.github.io/mocha/) for your tests, I recommend to use [grunt-phantom-coverage-reporter](https://github.com/mazerte/mocha-phantom-coverage-reporter). It's fully compatible with this tasks and coveralls.\n\nOptions\n-------\n\n### Data\n\n#### src\n\ntype: `String`\n\nPath to source folder\n\n#### desc\n\ntype: `String`\n\nPath to destination folder\n\n### Options\n\n#### coverageVar\n\ntype: `String` - default: `_$jscoverage`\n\nBy default, coffeecoverage will instrument source files with the global variable \"_$jscoverage\". This is done to mimic JSCoverage. You can rename this variable by using this option\n\n#### initfile\n\ntype: `String`\n\nSpecifies an \"initfile\" which all global initalization is written to. This is handy for testing with mocha. If you require the initfile, then mocha reports will show coverage of all files in your project, even files which were never required anywhere.\n\n#### exclude\n\ntype: `Array` - default: `['node_modules', '.git']`\n\nGives a comma delimited list of files and directories to exclude from processing. This defaults to `['node_modules', '.git']`, since neither of these are directories you probably want to be instrumenting. If you want to also exclude your \"test\" directory, you might run coffeeCoverage with: `['node_modules', '.git', 'test']`\n\n#### path\n\ntype: `String` - default: `none`\n\nPath can be given one of three different parameters:\n\n - `none` is the default - if coffeeCoverage reads a file from \"src/models/user.coffee\", then\n   the instrumented code will use the filename \"user.coffee\".  This works well provided you\n   don't reuse filenames elsewhere in your code.  Note that if there is a name collision between\n   two files in different subdirectories, coffeecoverage will append a something to the\n   end of one to make it unique, otherwise coverage data from one file would interfere with data\n   from another.\n - `abbr` will use abbreviated path names; a file from \"src/models/user.coffee\" will be\n   instrumented as \"s/m/user.coffee\".\n - `relative` will use the full relative pathname; \"src/models/user.coffee\".\n\nPaths are always relative to the `src` directory provided on grunt task.\n\nThanks\n------\n\nThanks to [Benbria](https://github.com/benbria) to [CoffeeCoverage](https://github.com/benbria/coffee-coverage)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mazerte/grunt-coffeecov/issues"
  },
  "homepage": "https://github.com/mazerte/grunt-coffeecov",
  "_id": "grunt-coffeecov@0.1.1",
  "_from": "grunt-coffeecov@~0.1.0"
}
